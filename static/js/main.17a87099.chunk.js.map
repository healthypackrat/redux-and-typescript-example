{"version":3,"sources":["store/system/types.ts","store/system/reducers.ts","store/chat/types.ts","store/chat/reducers.ts","store/index.ts","store/chat/actions.ts","ChatHistory.tsx","ChatInterface.tsx","App.tsx","store/system/actions.ts","thunks.ts","index.tsx"],"names":["UPDATE_SESSION","initialState","loggedIn","session","userName","SEND_MESSAGE","DELETE_MESSAGE","messages","rootReducer","combineReducers","system","state","action","type","payload","chat","filter","message","timestamp","meta","sendMessage","newMessage","ChatHistory","className","map","key","user","ChatInterface","updateMessage","send","value","onChange","onKeyPress","e","placeholder","onClick","App","event","setState","currentTarget","props","Date","getTime","this","updateSession","thunkSendMessage","React","connect","newSession","dispatch","a","Promise","resolve","asyncResp","store","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.17a87099.chunk.js","sourcesContent":["// Describing the shape of the system's slice of state\nexport interface SystemState {\n  loggedIn: boolean;\n  session: string;\n  userName: string;\n}\n\n// Describing the different ACTION NAMES available\nexport const UPDATE_SESSION = \"UPDATE_SESSION\";\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION;\n  payload: SystemState;\n}\n\nexport type SystemActionTypes = UpdateSessionAction;\n","import { UPDATE_SESSION, SystemState, SystemActionTypes } from \"./types\";\n\nconst initialState: SystemState = {\n  loggedIn: false,\n  session: \"\",\n  userName: \"\"\n};\n\nexport function systemReducer(\n  state = initialState,\n  action: SystemActionTypes\n): SystemState {\n  switch (action.type) {\n    case UPDATE_SESSION: {\n      return {\n        ...state,\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n","// Describing the shape of the chat's slice of state\nexport interface Message {\n  user: string;\n  message: string;\n  timestamp: number;\n}\n\nexport interface ChatState {\n  messages: Message[];\n}\n\n// Describing the different ACTION NAMES available\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\nexport const DELETE_MESSAGE = \"DELETE_MESSAGE\";\n\ninterface SendMessageAction {\n  type: typeof SEND_MESSAGE;\n  payload: Message;\n}\n\ninterface DeleteMessageAction {\n  type: typeof DELETE_MESSAGE;\n  meta: {\n    timestamp: number;\n  };\n}\n\nexport type ChatActionTypes = SendMessageAction | DeleteMessageAction;\n","import {\n  ChatState,\n  SEND_MESSAGE,\n  DELETE_MESSAGE,\n  ChatActionTypes\n} from \"./types\";\n\nconst initialState: ChatState = {\n  messages: []\n};\n\nexport function chatReducer(\n  state = initialState,\n  action: ChatActionTypes\n): ChatState {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      return {\n        messages: [...state.messages, action.payload]\n      };\n    case DELETE_MESSAGE:\n      return {\n        messages: state.messages.filter(\n          message => message.timestamp !== action.meta.timestamp\n        )\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport { systemReducer } from \"./system/reducers\";\nimport { chatReducer } from \"./chat/reducers\";\n\nconst rootReducer = combineReducers({\n  system: systemReducer,\n  chat: chatReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore() {\n  const middlewares = [thunkMiddleware];\n  const middleWareEnhancer = applyMiddleware(...middlewares);\n\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(middleWareEnhancer)\n  );\n\n  return store;\n}\n","import { Message, SEND_MESSAGE, DELETE_MESSAGE } from \"./types\";\n\nexport function sendMessage(newMessage: Message) {\n  return {\n    type: SEND_MESSAGE,\n    payload: newMessage\n  };\n}\n\nexport function deleteMessage(timestamp: number) {\n  return {\n    type: DELETE_MESSAGE,\n    meta: {\n      timestamp\n    }\n  };\n}\n","import * as React from \"react\";\nimport { Message } from \"./store/chat/types\";\n\ninterface ChatHistoryProps {\n  messages: Message[];\n}\n\nconst ChatHistory: React.SFC<ChatHistoryProps> = ({ messages }) => {\n  return (\n    <div className=\"chat-history\">\n      {messages.map(message => (\n        <div className=\"message-item\" key={message.timestamp}>\n          <h3>From: {message.user}</h3>\n          <p>{message.message}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ChatHistory;\n","import * as React from \"react\";\nimport { UpdateMessageParam } from \"./App\";\n\ninterface ChatInterfaceProps {\n  message: string;\n  userName: string;\n  sendMessage: (message: string) => void;\n  updateMessage: (event: UpdateMessageParam) => void;\n}\n\nconst ChatInterface: React.SFC<ChatInterfaceProps> = ({\n  userName,\n  message,\n  updateMessage,\n  sendMessage\n}) => {\n  function keyPress(e: React.KeyboardEvent<any>) {\n    if (e.key === \"Enter\") {\n      send();\n    }\n  }\n\n  function send() {\n    sendMessage(message);\n  }\n\n  return (\n    <div className=\"chat-interface\">\n      <h3>User: {userName} </h3>\n      <input\n        value={message}\n        onChange={updateMessage}\n        onKeyPress={keyPress}\n        className=\"chat-input\"\n        placeholder=\"Type a message...\"\n      />\n      <button onClick={send}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"./store\";\n\nimport \"./main.css\";\n\nimport { SystemState } from \"./store/system/types\";\nimport { updateSession } from \"./store/system/actions\";\n\nimport { ChatState } from \"./store/chat/types\";\nimport { sendMessage } from \"./store/chat/actions\";\n\nimport ChatHistory from \"./ChatHistory\";\nimport ChatInterface from \"./ChatInterface\";\n\nimport { thunkSendMessage } from \"./thunks\";\n\ninterface AppProps {\n  sendMessage: typeof sendMessage;\n  updateSession: typeof updateSession;\n  chat: ChatState;\n  system: SystemState;\n  thunkSendMessage: any;\n}\n\nexport type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\n\nclass App extends React.Component<AppProps> {\n  state = {\n    message: \"\"\n  };\n\n  componentDidMount() {\n    this.props.updateSession({\n      loggedIn: true,\n      session: \"my_session\",\n      userName: \"myName\"\n    });\n    this.props.sendMessage({\n      user: \"Chat Bot\",\n      message:\n        \"This is a very basic chat application written in typescript using react and redux. Feel free to explore the source code.\",\n      timestamp: new Date().getTime()\n    });\n\n    this.props.thunkSendMessage(\"This message was sent by a thunk!\");\n  }\n\n  updateMessage = (event: UpdateMessageParam) => {\n    this.setState({ message: event.currentTarget.value });\n  };\n\n  sendMessage = (message: string) => {\n    this.props.sendMessage({\n      user: this.props.system.userName,\n      message: message,\n      timestamp: new Date().getTime()\n    });\n    this.setState({ message: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"parent\">\n        <ChatHistory messages={this.props.chat.messages} />\n        <ChatInterface\n          userName={this.props.system.userName}\n          message={this.state.message}\n          updateMessage={this.updateMessage}\n          sendMessage={this.sendMessage}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  system: state.system,\n  chat: state.chat\n});\n\nexport default connect(\n  mapStateToProps,\n  { sendMessage, updateSession, thunkSendMessage }\n)(App);\n","import { SystemState, UPDATE_SESSION } from \"./types\";\n\nexport function updateSession(newSession: SystemState) {\n  return {\n    type: UPDATE_SESSION,\n    payload: newSession\n  };\n}\n","import { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { sendMessage } from \"./store/chat/actions\";\r\nimport { AppState } from \"./store\";\r\n\r\nexport const thunkSendMessage = (\r\n  message: string\r\n): ThunkAction<void, AppState, null, Action<string>> => async dispatch => {\r\n  const asyncResp = await exampleAPI();\r\n  dispatch(\r\n    sendMessage({\r\n      message,\r\n      user: asyncResp,\r\n      timestamp: new Date().getTime()\r\n    })\r\n  );\r\n};\r\n\r\nfunction exampleAPI() {\r\n  return Promise.resolve(\"Async Chat Bot\");\r\n}\r\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nimport App from \"./App\";\n\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nrender(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}